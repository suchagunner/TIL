(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{265:function(t,n,e){t.exports=e.p+"assets/img/img-react_portal_1.52dfbc00.png"},266:function(t,n,e){t.exports=e.p+"assets/img/img-react_portal_2.45756254.png"},275:function(t,n,e){"use strict";e.r(n);var o=e(13),r=Object(o.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"react-portal-포털"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-portal-포털"}},[t._v("#")]),t._v(" React Portal (포털)")]),t._v(" "),n("h2",{attrs:{id:"포털이란"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#포털이란"}},[t._v("#")]),t._v(" 포털이란")]),t._v(" "),n("blockquote",[n("p",[t._v("Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.")])]),t._v(" "),n("p",[t._v("포털은 모달이나 스낵바, 경고창, 이벤트 팝업 등을 표시할 때 유용한데 포털을 쓰지 않고 각 컴포넌트 내에서 자식으로 모달을 등록하면 생기는 문제가 있다.")]),t._v(" "),n("ul",[n("li",[t._v("부모 DOM 영향을 받는다.")]),t._v(" "),n("li",[t._v("부모 스타일의 영향을 받는다. (zIndex, overflow 등으로 override가 필요할 수 있다.)")])]),t._v(" "),n("p",[t._v("포털은 DOM의 특정 부분에 포털을 설치하고 그 곳으로 모달 등을 생성 시킬 수 있게 해줘 위와 같은 문제를 해결해준다.")]),t._v(" "),n("h2",{attrs:{id:"use-case"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-case"}},[t._v("#")]),t._v(" Use Case")]),t._v(" "),n("h1",{attrs:{id:"구현부"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#구현부"}},[t._v("#")]),t._v(" 구현부")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import {createContext, PropsWithChildren, useState} from "react";\nimport {createPortal} from "react-dom";\n\nconst PortalContext = createContext<Nullable<HTMLDivElement>>(null);\n\nfunction PortalProvider({children}: PropsWithChildren) {\n  const [portalContainer, setPortalContainer] = useState<Nullable<HTMLDivElement>>(null);\n  \n  return <PortalContext.Provider value={portalContainer}>\n    {children}\n    <div id="global-portal-container" ref={element => {\n      if (!portalContainer && element instanceof HTMLDivElement) {\n        setPortalContainer(element);\n        return;\n      }\n    }\n    }/>\n  </PortalContext.Provider>\n}\n\nfunction PortalConsumer({children}: PropsWithChildren) {\n  return <PortalContext.Consumer>\n    {value => {\n      if (!value) {\n        return;\n      }\n      \n      return createPortal(children, value)\n    }}\n  </PortalContext.Consumer>\n}\n\nexport default (() => ({\n  Provider: PortalProvider,\n  Consumer: PortalConsumer\n}))()\n')])])]),n("p",[t._v("위 코드는 GlobalPortal 컴포넌트를 Context API를 사용해서 구현해봤다. GlobalPortal를 설치할 곳에 GlobalPortal.Provider 을\n생성하고 자식으로 children을 받는다. 또한 모달 등의 실제 "),n("em",[t._v("컨텐트")]),t._v("를 받을 컨테이너 dom을 "),n("code",[t._v("global-portal-container")]),t._v("의 "),n("code",[t._v("id")]),t._v("를 갖는 "),n("code",[t._v("div")]),t._v("로\n생성했다.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// Page\nimport {PropsWithChildren, useMemo, useState} from "react";\nimport GlobalPortal from "./GlobalPortal";\nimport BottomCTA from "./BottomCTA";\n\nexport default function TodoPage(props: PropsWithChildren) {\n  const [bottomCTAShown, setBottomCTAShown] = useState(true)\n  \n  const CtaButton = useMemo(() => () => <BottomCTA>\n    버튼\n  </BottomCTA>, [])\n  \n  return <div>\n    <h1>테스트</h1>\n    <GlobalPortal.Consumer>\n      <button type=\'button\' onClick={toggleButton}>\n        버튼토글\n      </button>\n      {bottomCTAShown && <CtaButton />}\n    </GlobalPortal.Consumer>\n  </div>\n  \n  function toggleButton() {\n    setBottomCTAShown(!bottomCTAShown)\n  }\n}\n')])])]),n("p",[t._v("위와 같이 GlobalPortal.Consumer를 등록하고 자식 컴포넌트로 포털에 띄울 "),n("em",[t._v("컨텐트")]),t._v("를 설정한다.")]),t._v(" "),n("h1",{attrs:{id:"결과"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#결과"}},[t._v("#")]),t._v(" 결과")]),t._v(" "),n("p",[t._v("우측 브라우저 HTML 탐색기를 보면 포털에 들어갈 "),n("em",[t._v("컨텐트")]),t._v("들이 "),n("code",[t._v('<div id="global-portal-container" />')]),t._v("의 자식으로 잘 들어가 있는\n모습을 볼 수 있다. "),n("em",[n("strong",[t._v("포털로 특정 돔에 삽입")])]),t._v(" 기능을 사용하지 않는다면 DOM 계층 구조에 따라 "),n("code",[t._v("<main />")]),t._v(" 아래에 "),n("em",[t._v("컨텐트")]),t._v("가 존재하는 형태였을 것.")]),t._v(" "),n("p",[n("img",{attrs:{src:e(265),alt:"포털 컨텐트 삽입"}}),t._v("\n포털에 하단 CTA 버튼을 삽입한 상태.")]),t._v(" "),n("p",[n("img",{attrs:{src:e(266),alt:"포털 컨텐트 삽입"}}),t._v("\n포털에 하단 CTA 버튼을 제거한 상태.")])])}),[],!1,null,null,null);n.default=r.exports}}]);